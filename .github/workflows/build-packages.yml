name: Build TulioCP Packages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-packages:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        echo "✅ Installing build dependencies on ubuntu-latest"
        sudo apt-get update
        sudo apt-get install -y dpkg-dev build-essential
        echo "Node.js version: $(node --version 2>/dev/null || echo 'Not available')"
        echo "dpkg-deb available: $(which dpkg-deb)"
        echo "Build tools ready: $(which gcc)"
        echo "Working directory: $(pwd)"
    
    - name: Build TulioCP package using simple build script
      run: |
        echo "Building TulioCP package with simple script..."
        echo "Current directory: $(pwd)"
        echo "Contents of src directory:"
        ls -la src/
        
        # Make the build script executable and run it
        chmod +x src/build-minimal-package.sh
        cd src
        ./build-minimal-package.sh
        
        echo "Build completed, checking output..."
        find /tmp -name "*.deb" -type f 2>/dev/null || echo "No .deb files found in /tmp"
        
        # Create build directory and copy package there
        mkdir -p /tmp/tuliocp-src
        cp /tmp/*.deb /tmp/tuliocp-src/ 2>/dev/null || echo "No packages to copy"
        
        echo "Final package location:"
        ls -la /tmp/tuliocp-src/
      env:
        DEBIAN_FRONTEND: noninteractive
    
    - name: Verify built packages
      run: |
        echo "Verifying built packages..."
        find /tmp -name "*.deb" -type f 2>/dev/null || echo "No .deb packages found anywhere"
        
        echo "Contents of build directory:"
        ls -la /tmp/tuliocp-src/ || echo "No build directory found"
        
        if ls /tmp/tuliocp-src/*.deb 1>/dev/null 2>&1; then
          echo "✅ Package verification:"
          for deb in /tmp/tuliocp-src/*.deb; do
            echo "Package: $deb"
            dpkg-deb --info "$deb" | head -20
            echo "---"
          done
        else
          echo "❌ No packages found! Build may have failed."
          echo "This will create an empty repository - packages will be added when build succeeds."
        fi
    
    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: tuliocp-packages-amd64
        path: /tmp/tuliocp-src/*.deb
        retention-days: 30

  create-repository:
    needs: build-packages
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        path: artifacts/
    
    - name: Set up APT repository structure
      run: |
        mkdir -p apt-repo/dists/stable/main/binary-amd64
        mkdir -p apt-repo/pool/main
        
        # Debug: List artifacts
        echo "Available artifacts:"
        find artifacts/ -type f -name "*.deb" || echo "No .deb files found"
        ls -la artifacts/ || echo "No artifacts directory"
        
        # Move packages to pool
        find artifacts/ -name "*.deb" -exec cp {} apt-repo/pool/main/ \; || echo "Warning: No packages found to copy"
        
        # Debug: List repository contents
        echo "Repository contents:"
        find apt-repo/ -type f || echo "Repository is empty"
        
        # Create Packages files
        cd apt-repo
        dpkg-scanpackages pool/ /dev/null > dists/stable/main/binary-amd64/Packages
        gzip -9 -c dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.gz
        
        # Create Release file
        cat > dists/stable/Release << EOF
Origin: TulioCP
Label: TulioCP APT Repository
Suite: stable
Codename: stable
Components: main
Architectures: amd64
Date: $(date -u +"%a, %d %b %Y %H:%M:%S %Z")
Description: TulioCP Control Panel packages
EOF
        
        # For now, we'll create an unsigned repository
        # TODO: Add proper GPG signing when we have our own key
        echo "Created unsigned repository (packages will install with --allow-unauthenticated)"
        
        # Copy existing index page and update timestamp
        if [ -f "../apt-repo/index.html" ]; then
          cp "../apt-repo/index.html" index.html
          echo "Using existing repository index page"
        else
          echo "Warning: apt-repo/index.html not found, creating basic page"
          cat > index.html << 'EOF'
<!DOCTYPE html>
<html><head><title>TulioCP APT Repository</title></head>
<body><h1>TulioCP APT Repository</h1><p>Repository updated at $(date -u)</p></body></html>
EOF
        fi
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: success()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./apt-repo
        publish_branch: gh-pages
        cname: apt.tuliocp.com